I think that we'd be best to separate our work into two different sprints - one on the engine layer and one on the
game logic.  I have picked up a habit of always wanting to create a common layer for anything I develop because it
forces me to think in proper organization... for example, if we're going to be doing ASCII drawing, it would be a 
shame to make it specific to the project we're working on right now, and actually makes it harder most of the time.
So for now, let's just forget about actually building a game and design a kickass library layer first.  Then, come
like two weeks from now, we'll be able to build the game in a snap.  Also, because iOS development has been such a
nightmare of complexity (over 250 files - a mobile client with over 250 files!), so I tend to be pretty verbose
because if I'm not, I'm afraid I'll get lost if I come back to something.

Ready?  I've got the european club webradio playing... go go gadget design a game engine.  Let me know what makes
sense, what doesn't, and where you want to go.  If this looks good, let's make some issues to track the various
tasks and get going!

I think the game engine will need the following components:
1.  An input processor which listens for keyboard events and can pass them to the controller.
2.  An ASCII rendering manager which does the hard work of drawing all the objects.
3.  A core "engine" which has the run loop for the game.

I'm going to describe these in the order 3, 1, 2:

3.  Game engine.  Basically, this will be an object to create a subclass of when we want to make the game.  It's
going to be totally simple - it just owns all the global objects and has a method run() which gets called when the
program starts and sits in a while loop until it's time for it to terminate.  Each time through the game loop, the
game will dequeue all the events which happened since the last loop, decide what to do and what drawing updates to
make, and then call out to the rendering manager to draw all the things.  I thought about doing a listener model
like pygame does, but it just seemed too advanced for what we're trying to do.  If the run loop can run fast
enough (which it's basically guaranteed to do on hardware that's newer than like... 2007) then we can make the
loop rate like 60fps and there will be no lag to speak of.  I'm still toying with the idea of providing some sort
of helper framework for a finite-state-machine approach, but we'll see if that turns out.

Classes:  GameEngine (superclass for the game to derive from), StateMachineHelper (maybe)


1.  Input processor.  I'm thinking this is a good thing for you to start with.  The idea is to have one object
(owned by the game engine), which manages all the events in the system and then can provide all the events which
occurred when it's time to check them.  The key thing is that this is the big place where we'll be dealing with
asynchronous input... the user could press a key at any time, but if that's while we're in the middle of doing
something else, we don't want to act on it until the next time through the game loop.  So you'll want to figure
out how to listen to the keyboard events and stash them in a first-in-first-out queue until GameEngine calls for
them.  The best thing to do from a design standpoint would be to have an AbstractEvent superclass which you make
concrete subclasses of for all the different event types.  So EventsManager listens for key presses on its own
thread (or something... I don't know how Python does this yet), and then makes them available

Classes (this is just my vision - you get to decide):  EventsManager, AbstractEvent, KeyPressEvent (only type of event for now)

The API which GameEngine will need from EventsManager is probably something like this (I wrote the prototypes C-style because they're the most readable)
AbstractEvent* getNextEvent();  // removes an event from the front of the queue and returns it.
List* getAllEventsInQueue();
AbstractEvent* peekAtNextEvent();  // doesn't remove from the front of the queue.  Be careful calling this one!
void clearAllEventsFromQueue();  // ditches all the events that we haven't yet looked at.



3.  Drawing manager.  I think I'll start with this one.  My thought is to create a manager which handles the
drawing of objects to the "screen", which is really the ASCII window.  It will have a list of DrawableObjects,
each of which will be (also) tracked and updated by the game itself.  Then a call to AsciiRenderingManager's
draw() method will cause it to clear the screen and print out all the info again.  Each individual game will
need to create its own subclasses of DrawableObject to represent the different "sprites" it wants to draw.
The thing I don't really know how to do yet is model the character maps in memory - how to indicate which
characters to draw where.  I've basically made a helper class for that and decided to think about that later.
I also wanted to make sure we had the idea of different "contexts" for the display... meaning somewhere in
between states of rendering and skins.  Basically a way to specify in the draw() method if we want the display
to turn out a certain way.  I toyed with making an abstract class AsciiRenderingManagerDisplayContext, but
didn't do that for now.



Classes are AsciiRenderingManager, AsciiCharacterMap, and DrawableObject, with AsciiRenderingManager being the heavy lifter for drawing, and AsciiCharacterMap (which is entirely unwritten yet... help?) storing all the real data.
